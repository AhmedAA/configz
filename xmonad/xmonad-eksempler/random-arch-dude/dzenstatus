#!/bin/zsh
#
# Dzen statusbar, compiled from various sources
# Requires weather.com key and mocp
##################################################################

# Configuration
##################################################################
# Dzen's font
DZENFNT="-*-terminus-*-r-normal-*-*-120-*-*-*-*-iso8859-*"
# Dzen's background colour
DZENBG='#1a1a1a'
# Dzen's forground colour
DZENFG='#777777'
# Dzen's X position
DZENX=400
# Dzen's Y posit
DZENY=784
# Dzen's width
DZENWIDTH=790
# Dzen's alignment (l=left c=center r=right)
DZENALIGN=r
# Gauge background colour
#GAUGEBG='#323232'
GAUGEBG='#777777'
# Gauge foreground colour
#GAUGEFG='#8ba574'
GAUGEFG='#a1a1a1'
# Path to your Dzen icons
ICONPATH=/home/corrupt/.xmonad/images
# Icon Colors
ICONFG='#caff42'
# Network interface
INTERFACE=wlan0
# Sound device for volume control
SNDDEVICE=Master
# Date formating
DATE_FORMAT='%A, %d.%m.%Y %H:%M:%S'
# What tiem zones to use
TIME_ZONES=(Europe/Berlin)
# Main loop interval in seconds
SLEEP=1

# Function calling intervals in seconds
DATEIVAL=1
GTIMEIVAL=1
CPUTEMPIVAL=5
VOLUMEIVAL=1
BATTIVAL=10
##################################################################

# Battery
#################################################################

STATEFILE='/proc/acpi/battery/BAT0/state' # battery's state file
INFOFILE='/proc/acpi/battery/BAT0/info'   # battery's info file
 
LOWBAT=25        # percentage of battery life marked as low
LOWCOL='#ff4747' # color when battery is low
 
fbatt() {
 
# look up battery's data
BAT_FULL=`cat $INFOFILE|grep design|line|cut -d " " -f 11`;
STATUS=`cat $STATEFILE|grep charging|cut -d " " -f 12`;
RCAP=`cat $STATEFILE|grep remaining|cut -d " " -f 8`;
 
# calculate remaining power
RPERCT=`expr $RCAP \* 100`;
RPERC=`expr $RPERCT / $BAT_FULL`;
 
# draw the bar and pipe everything into dzen
if [ $RPERC -le $LOWBAT ]; then GFG=$LOWCOL; fi
echo -n $RPERC | gdbar -h $GH -w $GW -fg $GFG -bg $GBG

}

# Time and date 
##################################################################
DATE_FORMAT='%a, %d.%m.%Y %H:%M:%S'

fdate() {
    date +${DATE_FORMAT}
}
##################################################################


# Global time
##################################################################
fgtime() {
    local i

    for i in $TIME_ZONES
        { print -n "${i:t}:" $(TZ=$i date +'%H:%M')' ' }
}
##################################################################

# CPU use
##################################################################
fcpu() {
   gcpubar -c 5 -i 0.1 -fg $GAUGEFG -bg $GAUGEBG -h 7 -w 70 | tail -1
}
##################################################################


# CPU temp   
##################################################################
fcputemp() {
   print -n ${(@)$(</proc/acpi/thermal_zone/THM/temperature)[2,3]}
}
##################################################################

# For Creative Audigy 2 ZS
fvolume() {
    percentage=`amixer sget Master | sed -ne 's/^.*Mono: .*\[\([0-9]*\)%\].*$/\1/p'`
    onoff=`amixer sget Master | sed -ne 's/^.*Mono: .*\[\([of]*\)].*$/\1/p'`
    # print -n "$(echo $percentage | gdbar -fg $GAUGEFG -bg $GAUGEBG -h 7 -w 60)"

if [[ $onoff == 'off' ]]
then
   print -n "$(echo  "mute" )"
   VOLICON="${ICONPATH}/vol-mute.xbm"
else 

    VOLICON="${ICONPATH}/vol-hi.xbm"	
    if [[ $percentage == 100 ]]
    then
        print -n "$(echo $percentage | gdbar -fg '#319845' -bg $GAUGEBG -h 7 -w 60)" # Volume full
    elif [[ $percentage -gt 50 ]]
    then
        print -n "$(echo $percentage | gdbar -fg '#7CA655' -bg $GAUGEBG -h 7 -w 60)" # Volume half to full
    elif [[ $percentage -gt 25 ]]
    then
        print -n "$(echo $percentage | gdbar -fg $GAUGEFG -bg $GAUGEBG -h 7 -w 60)" # Volume quarter to half 
    elif [[ $percentage -lt 26 ]]
    then
        print -n "$(echo $percentage | gdbar -fg '#888E82' -bg $GAUGEBG -h 7 -w 60)" # Volume low to quarter
    fi
fi

}


# HD partitions used and free space
##################################################################
fhd() {
   # Todo
}
##################################################################

# Network
##################################################################

# Here we remember the previous rx/tx counts
RXB=`cat /sys/class/net/${INTERFACE}/statistics/rx_bytes`
TXB=`cat /sys/class/net/${INTERFACE}/statistics/tx_bytes`


# Main function
##################################################################

BATTCOUNTER=0;DATECOUNTER=0;GTIMECOUNTER=0;CPUTEMPCOUNTER=0;MUSICCOUNTER=0;WEATHERCOUNTER=0;VOLUMECOUNTER=0

# Execute everything once
PDATE=$(fdate)
PGTIME=$(fgtime)
PCPU=$(fcpu)
PCPUTEMP=$(fcputemp)
PHD=$(fhd)
PVOLUME=$(fvolume)
BATT=$(fbatt)

# Main loop
while :; do

PCPU=$(fcpu)
PHD=$(fhd)

   if [ $DATECOUNTER -ge $DATEIVAL ]; then
     PDATE=$(fdate)
     DATECOUNTER=0
   fi

   if [ $GTIMECOUNTER -ge $GTIMEIVAL ]; then
     PGTIME=$(fgtime)
     GTIMECOUNTER=0
   fi

   if [ $CPUTEMPCOUNTER -ge $CPUTEMPIVAL ]; then
     PCPUTEMP=$(fcputemp)
     CPUTEMPCOUNTER=0
   fi

   if [ $VOLUMECOUNTER -ge $VOLUMEIVAL ]; then
     PVOLUME=$(fvolume)
     VOLUMECOUNTER=0
   fi

   if [ $BATTCOUNTER -ge $BATTIVAL ]; then
     BATT=$(fbatt)
     BATTCOUNTER=0
   fi

    # Get new rx/tx counts
    RXBN=`cat /sys/class/net/${INTERFACE}/statistics/rx_bytes`
    TXBN=`cat /sys/class/net/${INTERFACE}/statistics/tx_bytes`

    # Calculate the rates
    # format the values to 4 digit fields
    RXR=$(printf "%4d\n" $(echo "($RXBN - $RXB) / 1024/${SLEEP}" | bc))
    TXR=$(printf "%4d\n" $(echo "($TXBN - $TXB) / 1024/${SLEEP}" | bc))

    # Print out 
    echo "| ^fg(${ICONFG})^p(1)^i(${ICONPATH}/cpu.xbm) ^fg()${PCPU} | ^fg(${ICONFG})^i(${ICONPATH}/temp.xbm)^fg()${PCPUTEMP}Â° | ^fg(${ICONFG})^p(1)^i(${ICONPATH}/power-bat.xbm)${BATT} ^fg()| ^fg(${ICONFG})^i(${ICONPATH}/net-wifi5.xbm)^fg(white)${RXR}kB/s^fg(#80AA83)^p(1)^i(${ICONPATH}/down.xbm)^fg(white)${TXR}kB/s^fg(orange3)^p(0)^i(${ICONPATH}/up.xbm)^fg() | ^fg(#FFFFFF)${PDATE} ^fg() | ^fg(${ICONFG})^p(0)^i($VOLICON) ^fg()${PVOLUME}  "
 
    # Reset old rates
    RXB=$RXBN; TXB=$TXBN

   DATECOUNTER=$((DATECOUNTER+1))
   GTIMECOUNTER=$((GTIMECOUNTER+1))
   CPUTEMPCOUNTER=$((CPUTEMPCOUNTER+1))
   VOLUMECOUNTER=$((VOLUMECOUNTER+1))
   BATTCOUNTER=$((BATTCOUNTER+1))

sleep $SLEEP

# Pass it to dzen
done | dzen2 -bg $DZENBG -fg $DZENFG -x $DZENX -y $DZENY -ta $DZENALIGN -h 16 -w $DZENWIDTH -p -e "button2=exec:$TOGGLE;button4=exec:$CI;button5=exec:$CD" -fn $DZENFNT
